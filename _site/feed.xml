<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zekun Blog</title>
    <description>Every failure is leading towards success.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 21 Dec 2019 21:12:05 -0600</pubDate>
    <lastBuildDate>Sat, 21 Dec 2019 21:12:05 -0600</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>Roulette Simulation</title>
        <description>&lt;h1 id=&quot;background&quot;&gt;Background&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Roulette is a casino game named after the French word meaning little wheel. In the game, players may choose to place bets on either a single number, various groupings of numbers, the colors red or black, whether the number is odd or even, or if the numbers are high (19–36) or low (1–18).
&lt;em&gt;From &lt;a href=&quot;https://en.wikipedia.org/wiki/Roulette&quot;&gt;Wikipedia-Roulette&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;p&gt;This time we will talk about a kind of simplified Roulette, which won’t be influenced by the number on roulette but only be divided into two parts, win or lose.&lt;/p&gt;

&lt;p&gt;To play the game successfully and avoid owing unrealistic debt, we need to set some parameter at first. These parameter will be save in a state list.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parameter&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Explaination&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;number&lt;/td&gt;
      &lt;td&gt;the budget&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;W&lt;/td&gt;
      &lt;td&gt;number&lt;/td&gt;
      &lt;td&gt;the budget threshold for successfully stoping&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;number&lt;/td&gt;
      &lt;td&gt;the maximum number of plays&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;M&lt;/td&gt;
      &lt;td&gt;number&lt;/td&gt;
      &lt;td&gt;the casino wager limit&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;plays&lt;/td&gt;
      &lt;td&gt;integer&lt;/td&gt;
      &lt;td&gt;the number of plays executed&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;previous_wager&lt;/td&gt;
      &lt;td&gt;number&lt;/td&gt;
      &lt;td&gt;the wager in the previous play (0 at first play)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;previous_win&lt;/td&gt;
      &lt;td&gt;TRUE/FALSE&lt;/td&gt;
      &lt;td&gt;indicator if the previous play was a win (TRUE at first play)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;function-setup&quot;&gt;Function Setup&lt;/h1&gt;

&lt;h2 id=&quot;one-play&quot;&gt;One Play&lt;/h2&gt;

&lt;p&gt;In order to use pipes “%&amp;gt;%” in code, we need to import the package first.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-{r,results='hide'}&quot;&gt;library(dplyr)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, let’s define the process of one play.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-{r}&quot;&gt; one_play &amp;lt;- function(state){

    # Wager
    proposed_wager &amp;lt;- ifelse(state$previous_win, 1, 2*state$previous_wager)
    wager &amp;lt;- min(proposed_wager, state$M, state$B)

    # Spin of the wheel
    red &amp;lt;- rbinom(1,1,18/38)

    # Update state
    state$plays &amp;lt;- state$plays + 1
    state$previous_wager &amp;lt;- wager
    if(red){
      # WIN
      state$B &amp;lt;- state$B + wager
      state$previous_win &amp;lt;- TRUE
    }else{
      # LOSE
      state$B &amp;lt;- state$B - wager
      state$previous_win &amp;lt;- FALSE
    }
  state
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the player run out of the money or win enough money or play enough times, we need to stop the game by set up an stop function.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-{r}&quot;&gt;stop_play &amp;lt;- function(state){
  if(state$B &amp;lt;= 0) return(TRUE)
  if(state$plays &amp;gt;= state$L) return(TRUE)
  if(state$B &amp;gt;= state$W) return(TRUE)
  FALSE
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;multiple-plays&quot;&gt;Multiple Plays&lt;/h2&gt;

&lt;p&gt;Next, we need to play the game under our rules as a series. The function will output a budget list to record the money value after every play.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-{r}&quot;&gt;one_series &amp;lt;- function(
    B = 200
  , W = 300
  , L = 1000
  , M = 100
){

  # initial state
  state &amp;lt;- list(
    B = B
  , W = W
  , L = L
  , M = M
  , plays = 0
  , previous_wager = 0
  , previous_win = TRUE
  )

  # vector to store budget over series of plays
  budget &amp;lt;- rep(NA, L)

  # For loop of plays
  for(i in 1:L){
    new_state &amp;lt;- state %&amp;gt;% one_play
    budget[i] &amp;lt;- new_state$B
    if(new_state %&amp;gt;% stop_play){
      return(budget[1:i])
    }
    state &amp;lt;- new_state
  }
  budget
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can get the final result of this series of play.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-{r}&quot;&gt;# helper function
get_last &amp;lt;- function(x) x[length(x)]
get_series &amp;lt;- function(x) x
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;simulation&quot;&gt;Simulation&lt;/h1&gt;

&lt;p&gt;In order to figure out the generalized result, we need to repeat the process for a huge number of times then try to find out the distribution and other characteristics of results.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-{r}&quot;&gt;# Simulation
walk_out_money &amp;lt;- rep(NA, 1000)
for(j in seq_along(walk_out_money)){
  walk_out_money[j] &amp;lt;- one_series(B = 200, W = 300, L = 1000, M = 100) %&amp;gt;% get_last
}

# Walk out money distribution
hist(walk_out_money, breaks = 100)

# Estimated probability of walking out with extra cash
mean(walk_out_money &amp;gt; 200)

# Estimated earnings
mean(walk_out_money - 200)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;compare&quot;&gt;Compare&lt;/h1&gt;

&lt;p&gt;In this graph, we can see how the budget changes during in one series.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-{r}&quot;&gt;budget_list &amp;lt;- one_series(B = 200, W = 300, L = 1000, M = 100) %&amp;gt;% get_series
plot(budget_list, type=&quot;l&quot;, xlim=c(0,500), ylim=c(0,300), xlab=&quot;play number&quot;, ylab=&quot;earning money&quot;, main=&quot;budget series&quot;,col=&quot;red&quot;)
budget_list &amp;lt;- one_series(B = 200, W = 300, L = 1000, M = 100) %&amp;gt;% get_series
lines(budget_list, col=&quot;orange&quot;)
budget_list &amp;lt;- one_series(B = 200, W = 300, L = 1000, M = 100) %&amp;gt;% get_series
lines(budget_list, col=&quot;yellow&quot;)
budget_list &amp;lt;- one_series(B = 200, W = 300, L = 1000, M = 100) %&amp;gt;% get_series
lines(budget_list, col=&quot;green&quot;)
budget_list &amp;lt;- one_series(B = 200, W = 300, L = 1000, M = 100) %&amp;gt;% get_series
lines(budget_list, col=&quot;gray&quot;)
budget_list &amp;lt;- one_series(B = 200, W = 300, L = 1000, M = 100) %&amp;gt;% get_series
lines(budget_list, col=&quot;blue&quot;)
budget_list &amp;lt;- one_series(B = 200, W = 300, L = 1000, M = 100) %&amp;gt;% get_series
lines(budget_list, col=&quot;purple&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;prob1-rainbow.png&quot; alt=&quot;compare1&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Parameter&lt;/th&gt;
      &lt;th&gt;Type&lt;/th&gt;
      &lt;th&gt;Explaination&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;number&lt;/td&gt;
      &lt;td&gt;the budget&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;W&lt;/td&gt;
      &lt;td&gt;number&lt;/td&gt;
      &lt;td&gt;the budget threshold for successfully stoping&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;number&lt;/td&gt;
      &lt;td&gt;the maximum number of plays&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;M&lt;/td&gt;
      &lt;td&gt;number&lt;/td&gt;
      &lt;td&gt;the casino wager limit&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;change-the-budget&quot;&gt;Change the budget&lt;/h2&gt;

&lt;p&gt;When B changes, what is the mean earning.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-{r}&quot;&gt;earning_series &amp;lt;- rep(NA,20)
for(B in seq(100,1000,by=50)){
walk_out_money &amp;lt;- rep(NA, 1000)
for(j in seq_along(walk_out_money)){
  walk_out_money[j] &amp;lt;- one_series(B, W=B+100, L = 1000, M = 100) %&amp;gt;% get_last
}
earning_series[B] &amp;lt;- mean(walk_out_money - B)/B
}
plot(earning_series,xlab=&quot;Budget&quot;,ylab=&quot;mean earning rate&quot;, main=&quot;How Budget influence earning?&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;prob1-budget.png&quot; alt=&quot;budget&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;change-the-budget-threshold-for-successfully-stoping&quot;&gt;Change the budget threshold for successfully stoping&lt;/h2&gt;

&lt;p&gt;When W changes, what is the mean earning.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-{r}&quot;&gt;earning_series &amp;lt;- rep(NA,20)
for(W in seq(100,1000,by=50)){
walk_out_money &amp;lt;- rep(NA, 10000)
for(j in seq_along(walk_out_money)){
  walk_out_money[j] &amp;lt;- one_series(B=200, W, L = 1000, M = 100) %&amp;gt;% get_last
}
earning_series[W] &amp;lt;- mean(walk_out_money - 200)
}
plot(earning_series,xlab=&quot;successfully stoping number&quot;,ylab=&quot;mean earning&quot;, main=&quot;How successfully stoping influence earning?&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;prob1-ssn.png&quot; alt=&quot;ssn&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;change-the-maximum-number-of-plays&quot;&gt;Change the maximum number of plays&lt;/h2&gt;

&lt;p&gt;When L changes, what is the mean earning.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-{r}&quot;&gt;earning_series &amp;lt;- rep(NA,100)
for(L in seq(10,1000,by=10)){
walk_out_money &amp;lt;- rep(NA, 1000)
for(j in seq_along(walk_out_money)){
  walk_out_money[j] &amp;lt;- one_series(B=200, W=300, L, M = 100) %&amp;gt;% get_last
}
earning_series[L] &amp;lt;- mean(walk_out_money - 200)
}
plot(earning_series,xlab=&quot;maximum number of plays&quot;,ylab=&quot;mean earning&quot;, main=&quot;How maximum number of plays influence earning?&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;prob1-mnp.png&quot; alt=&quot;mnp&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;change-the-casino-wager-limit&quot;&gt;Change the casino wager limit&lt;/h2&gt;

&lt;p&gt;When M changes, what is the mean earning.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-{r}&quot;&gt;earning_series &amp;lt;- rep(NA,100)
for(M in seq(10,1000,by=10)){
walk_out_money &amp;lt;- rep(NA, 1000)
for(j in seq_along(walk_out_money)){
  walk_out_money[j] &amp;lt;- one_series(B=200, W=300, L=500, M) %&amp;gt;% get_last
}
earning_series[M] &amp;lt;- mean(walk_out_money - 200)
}
plot(earning_series,xlab=&quot;casino wager limit&quot;,ylab=&quot;mean earning&quot;, main=&quot;How casino wager limit influence earning?&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;prob1-cwl.png&quot; alt=&quot;cwl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, we can save the times that the game played before walk out then find out the characteristics.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-{r}&quot;&gt;get_times &amp;lt;- function(x) length(x)
walk_out_times &amp;lt;- rep(NA, 10000)
for(j in seq_along(walk_out_times)){
  walk_out_times[j] &amp;lt;- one_series(B = 200, W = 300, L = 1000, M = 100) %&amp;gt;% get_times
}

hist(walk_out_times, breaks = 100)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;prob1-hwot.png&quot; alt=&quot;hwot&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-{r}&quot;&gt;mean(walk_out_times)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The mean of walk out time is 203.0846.&lt;/p&gt;

&lt;p&gt;The limitation of simulation is obvious. It is a black box actually. We can not use it as we proof it by mathematical method. We don’t know why it happened and how it happened, so we can only change the parameter to try to understand the process. By the way, it is not a precise result. Everytime we get a answer, it will change a little bit next time.&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Sep 2019 00:00:00 -0500</pubDate>
        <link>http://localhost:4000/2019/09/04/roulette-simulation/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/09/04/roulette-simulation/</guid>
        
        <category>Probability</category>
        
        <category>Simulation</category>
        
        <category>R</category>
        
        
      </item>
    
      <item>
        <title>为博客添加 Gitalk 评论插件</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;由于 &lt;strong&gt;Disqus&lt;/strong&gt; 对于国内网路的支持十分糟糕，很多人反映 Disqus 评论插件一直加载不出来。而我一直是处于翻墙状态的~（话说你们做程序员的都不翻墙用Google的吗😅，哈哈，吐嘈下）&lt;/p&gt;

&lt;p&gt;针对这个问题，我添加了&lt;a href=&quot;https://github.com/gitalk/gitalk&quot;&gt;Gitalk&lt;/a&gt; 评论插件。在此，非常感谢 &lt;a href=&quot;https://github.com/FeDemo&quot;&gt;@FeDemo&lt;/a&gt; 的推荐 。&lt;/p&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;

&lt;h3 id=&quot;gitalk-评论插件&quot;&gt;Gitalk 评论插件&lt;/h3&gt;

&lt;p&gt;首先来看看 Gitalk 的界面和功能：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gitalk.github.io/&quot;&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1fmm4u3j0lmj30nk0kl40i.jpg&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;gitalk 使用 Github 帐号登录，界面干净整洁，最喜欢的一点是支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;MarkDown语法&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;原理&quot;&gt;原理&lt;/h3&gt;

&lt;p&gt;Gitalk 是一个利用 Github API,基于 Github issue 和 Preact 开发的评论插件，在 Gitalk 之前还有一个 &lt;a href=&quot;https://github.com/imsun/gitment&quot;&gt;gitment&lt;/a&gt; 插件也是基于这个原理开发的,不过 gitment 已经很久没人维护了。&lt;/p&gt;

&lt;p&gt;可以看到在 gitalk 的评论框进行评论时，其实就是在对应的 issue 上提问题。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1fmm5916av1j30i209rab7.jpg&quot; alt=&quot;gitalk评论框&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1fmm596ggkfj30mx0gfjuk.jpg&quot; alt=&quot;Github issue&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;集成-gitalk&quot;&gt;集成 Gitalk&lt;/h3&gt;

&lt;p&gt;到这里，你应该对 Gitalk 有个大致的了解了，现在，开始集成 gitalk 插件吧。&lt;/p&gt;

&lt;p&gt;将这段代码插入到你的网站：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Gitalk&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;评论&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Link&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Gitalk&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;的支持文件&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;stylesheet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://unpkg.com/gitalk/dist/gitalk.css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gitalk-container&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;text/javascript&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gitalk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Gitalk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// gitalk的主要参数&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;clientID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Github Application clientID`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;clientSecret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Github Application clientSecret`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`存储你评论 issue 的 Github 仓库名`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Github 用户名&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Github 用户名&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
		&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;页面的唯一标识，gitalk会根据这个标识自动创建的issue的标签&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;gitalk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;gitalk-container&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Gitalk&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们需要关心的就是配置下面几个参数：&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;clientID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Github Application clientID`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;clientSecret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Github Application clientSecret`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`Github 仓库名`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//存储你评论 issue 的 Github 仓库名（建议直接用 GitHub Page 的仓库名）&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Github 用户名&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Github 用户名&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//这个仓库的管理员，可以有多个，用数组表示，一般写自己,&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;window.location.pathname&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//页面的唯一标识，gitalk 会根据这个标识自动创建的issue的标签,我们使用页面的相对路径作为标识&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;当然，还有其他很多参数，有兴趣的话可以 &lt;a href=&quot;https://github.com/gitalk/gitalk#options&quot;&gt; 点这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;比如我就增加了这个全屏遮罩的参数。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;distractionFreeMode: true,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;创建-github-application&quot;&gt;创建 Github Application&lt;/h3&gt;

&lt;p&gt;Gitalk 需要一个 &lt;strong&gt;Github Application&lt;/strong&gt;，&lt;a href=&quot;https://github.com/settings/applications/new&quot;&gt;点击这里申请&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;填写下面参数：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fmm7jaib6fj30jo0gaacs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;点击创建&lt;/p&gt;

&lt;p&gt;获取 &lt;code class=&quot;highlighter-rouge&quot;&gt;Client ID&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Client Secret&lt;/code&gt; 填入你的我们 Gitalk 参数中&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fmm7jrzff6j30lc0budhp.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当你参数都设置好，将代码推送到 Github 仓库后，没什么问题的话，当你点击进入你的博客页面后就会出现评论框了。&lt;/p&gt;

&lt;p&gt;当你用 github 帐号登录（管理员），并且第一次加载该会比较慢，因为第一次加载会自动在你 &lt;code class=&quot;highlighter-rouge&quot;&gt;repo&lt;/code&gt; 的仓库下创建对应 issue。&lt;/p&gt;

&lt;p&gt;比如说这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fmm867n88cj30l809mjse.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcgy1fmm8a0i0jkj30rr0ct42t.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，你也可以手动创建issue作为 gitalk评论容器。只要有 &lt;code class=&quot;highlighter-rouge&quot;&gt;Gitalk&lt;/code&gt; 标签 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt; 对应标签就可以。比我我自己创建的 &lt;a href=&quot;https://github.com/qiubaiying/qiubaiying.github.io/issues/38&quot;&gt;About issue&lt;/a&gt; 。&lt;/p&gt;

&lt;h1 id=&quot;结语&quot;&gt;结语&lt;/h1&gt;

&lt;p&gt;最后说几句吐嘈几句， Gitalk 需要你点开每篇文章的页面才会创建对应的 issue,对我来说真是个糟糕的体验（文章有点多~）。&lt;/p&gt;

&lt;p&gt;当然，也有解决办法，这篇 &lt;a href=&quot;https://draveness.me/git-comments-initialize&quot;&gt;自动初始化 Gitalk 和 Gitment 评论&lt;/a&gt;，就解决了这个问题。&lt;/p&gt;

&lt;p&gt;最后，&lt;a href=&quot;https://github.com/qiubaiying/qiubaiying.github.io&quot;&gt;给个 star 吧&lt;/a&gt;~&lt;/p&gt;
</description>
        <pubDate>Tue, 19 Dec 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2017/12/19/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0-Gitalk-%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/19/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0-Gitalk-%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</guid>
        
        <category>Blog</category>
        
        
      </item>
    
  </channel>
</rss>
