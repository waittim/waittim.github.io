I"!9<p>The content of this tutorial is an extension of the <a href="https://waittim.github.io/2020/11/10/build-ncnn/">Tutorial for compiling NCNN library</a>.</p>

<p>When we successfully compile the NCNN library normally, we can use the tools in it to convert our models into NCNN format models (<code class="highlighter-rouge">*.param</code> and <code class="highlighter-rouge">*.bin</code>). This model can be used for various mobile terminal deployments.</p>

<p>But when we need to deploy the model in a webpage, we need to compile the model and the C++ program that calls it into WebAssembly format. Before compiling the program, we must first compile the NCNN library into the form of WebAssembly.</p>

<p>The content of this article is the specific steps for compiling the NCNN library into WebAssembly. The following steps have been tested on <strong>Ubuntu 18.04</strong>.</p>

<h2 id="install-nodejs">Install Node.js</h2>

<p>Before starting, we need to install the latest version of node.js as a dependency in the environment. You can find the installation tutorial on its official <a href="https://github.com/nodejs/help/wiki/Installation">Github</a>. I chose its recommended installation location.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">VERSION</span><span class="o">=</span>v14.15.1
<span class="nv">DISTRO</span><span class="o">=</span>linux-x64
<span class="nb">sudo mkdir</span> <span class="nt">-p</span> /usr/local/lib/nodejs
<span class="nb">sudo tar</span> <span class="nt">-xJvf</span> node-<span class="nv">$VERSION</span>-<span class="nv">$DISTRO</span>.tar.xz <span class="nt">-C</span> /usr/local/lib/nodejs
</code></pre></div></div>

<p>This step is to extract the nodejs package to the recommended location. Next, run <code class="highlighter-rouge">~/.profile</code> in terminal, and paste the content below to the end of the pop-up file.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Nodejs</span>
<span class="nv">VERSION</span><span class="o">=</span>v14.15.1
<span class="nv">DISTRO</span><span class="o">=</span>linux-x64
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/usr/local/lib/nodejs/node-<span class="nv">$VERSION</span>-<span class="nv">$DISTRO</span>/bin:<span class="nv">$PATH</span>
</code></pre></div></div>

<p>Run <code class="highlighter-rouge">. ~/.profile</code> in terminal to refresh the profile.</p>

<p>After the installation is over, you can run <code class="highlighter-rouge">node -v</code> in terminal to check whether the installation is successful.</p>

<h2 id="build-ncnn-with-wasm">Build NCNN with WASM</h2>

<p>First, letâ€™s clone the NCNN repository. This folder should be <strong>different</strong> from the one we used before(in the previous article), because they have different usage.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/Tencent/ncnn.git
<span class="nb">cd </span>ncnn
</code></pre></div></div>

<p>Then clone the key library <strong>emsdk</strong> for compiling WASM.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/emscripten-core/emsdk.git
<span class="nb">cd </span>emsdk
</code></pre></div></div>

<p>Install and activate it.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./emsdk <span class="nb">install </span>latest
./emsdk activate latest
</code></pre></div></div>

<p>Then, return to the parent folder(master of ncnn), set the emsdk as a source.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ..
<span class="nb">source </span>emsdk/emsdk_env.sh
</code></pre></div></div>

<p>Observe the output of the terminal here, you will find that the currently used nodejs is a built-in library in emsdk, and its version is old. Therefore, we need to re-add the latest version of nodejs that we installed before to the path.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/usr/local/lib/nodejs/node-v14.15.1-linux-x64/bin:<span class="nv">$PATH</span>
</code></pre></div></div>

<p>You can run <code class="highlighter-rouge">node -v</code> to check the version again.</p>

<p>Next, prepare to compile the NCNN library.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>build <span class="o">&amp;&amp;</span> <span class="nb">cd </span>build
</code></pre></div></div>

<p>If you are compiling for a browser that supports experimental WebAssembly features such as SIMD and SSE2, please use the following code.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmake <span class="nt">-DCMAKE_TOOLCHAIN_FILE</span><span class="o">=</span>../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake <span class="nt">-DNCNN_SIMPLEOMP</span><span class="o">=</span>ON <span class="nt">-DNCNN_BUILD_TESTS</span><span class="o">=</span>ON ..
</code></pre></div></div>

<p>If it is compiled for browsers such as Safari in iOS without SIMD SSE2, replace it with the following code.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmake <span class="nt">-DCMAKE_TOOLCHAIN_FILE</span><span class="o">=</span>../emsdk/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake <span class="nt">-DNCNN_OPENMP</span><span class="o">=</span>OFF <span class="nt">-DNCNN_SIMPLEOMP</span><span class="o">=</span>OFF <span class="nt">-DNCNN_RUNTIME_CPU</span><span class="o">=</span>OFF <span class="nt">-DNCNN_SSE2</span><span class="o">=</span>OFF <span class="nt">-DNCNN_AVX2</span><span class="o">=</span>OFF <span class="nt">-DNCNN_BUILD_TESTS</span><span class="o">=</span>ON ..
</code></pre></div></div>

<p>Then start make.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make
</code></pre></div></div>

<p>After the make ends, use the built-in test case of NCNN to check whether the compilation is successful.</p>

<p>With SIMD SSE2:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">TESTS_EXECUTABLE_LOADER</span><span class="o">=</span>node <span class="nv">TESTS_EXECUTABLE_LOADER_ARGUMENTS</span><span class="o">=</span><span class="s2">"--experimental-wasm-simd;--experimental-wasm-threads;--experimental-wasm-bulk-memory"</span> ctest <span class="nt">--output-on-failure</span> <span class="nt">-j</span> 2
</code></pre></div></div>

<p>Without SIMD SSE2:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">TESTS_EXECUTABLE_LOADER</span><span class="o">=</span>node ctest <span class="nt">--output-on-failure</span> <span class="nt">-j</span> 2
</code></pre></div></div>

<p>If all the tests are passed, generate the install file.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make <span class="nb">install</span>
</code></pre></div></div>

<p>So far, the NCNN with WebAssembly has been compiled, and the next step is to introduce its usage.</p>

<h2 id="compile-c-code">Compile C++ code</h2>

<p>First, we need to write a C++ program that calls the NCNN model. The relevant files I have written have been uploaded in the facemask-detection repository, and I will compile it based on this.</p>

<p>Clone it to the specified folder.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Documents 
git clone https://github.com/waittim/facemask-detection.git
<span class="nb">cd </span>facemask-detection
</code></pre></div></div>

<p>Note that if you are compiling a version without SIMD and SSE2, please delete the following content in <a href="https://github.com/waittim/facemask-detection/blob/master/CMakeLists.txt">CMakeLists.txt</a>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">set</span><span class="o">(</span>CMAKE_C_FLAGS <span class="s2">"</span><span class="k">${</span><span class="nv">CMAKE_C_FLAGS</span><span class="k">}</span><span class="s2"> -fopenmp -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=15"</span><span class="o">)</span> 
<span class="nb">set</span><span class="o">(</span>CMAKE_CXX_FLAGS <span class="s2">"</span><span class="k">${</span><span class="nv">CMAKE_CXX_FLAGS</span><span class="k">}</span><span class="s2"> -fopenmp -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=15"</span><span class="o">)</span> 
<span class="nb">set</span><span class="o">(</span>CMAKE_EXE_LINKER_FLAGS <span class="s2">"</span><span class="k">${</span><span class="nv">CMAKE_EXE_LINKER_FLAGS</span><span class="k">}</span><span class="s2"> -fopenmp -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=15"</span><span class="o">)</span>
</code></pre></div></div>

<p>And change <code class="highlighter-rouge">target_link_libraries(yolo ncnn pthread)</code> to be <code class="highlighter-rouge">target_link_libraries(yolo ncnn)</code>.</p>

<p>Next, create an empty folder named ncnn in it, and copy the two files under <code class="highlighter-rouge">build/install/</code> under ncnn master to this ncnn folder.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>ncnn
</code></pre></div></div>

<p>Copy the emsdk folder under ncnn master and paste it to the master folder of facemask-detection.</p>

<p>At this time, I recommend to use <code class="highlighter-rouge">node -v</code> to ensure that the version of nodejs is correct.</p>

<p>Finally, use emsdk to compile.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>emcmake cmake
emmake make
</code></pre></div></div>

<p>After compiling, you can get <code class="highlighter-rouge">yolo.js</code>, <code class="highlighter-rouge">yolo.wasm</code>,
<code class="highlighter-rouge">yolo.worker.js</code>. These are the files needed to call WASM format functions in the JavaScript environment.</p>

<hr />

<p>The complete CMakeLists.txt content is as follows:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>project<span class="o">(</span>facemask-detection<span class="o">)</span>

cmake_minimum_required<span class="o">(</span>VERSION 3.10<span class="o">)</span>

<span class="nb">set</span><span class="o">(</span>CMAKE_BUILD_TYPE release<span class="o">)</span>

<span class="nb">set</span><span class="o">(</span>ncnn_DIR <span class="s2">"</span><span class="k">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="k">}</span><span class="s2">/ncnn/lib/cmake/ncnn"</span><span class="o">)</span>
find_package<span class="o">(</span>ncnn REQUIRED<span class="o">)</span>

<span class="nb">set</span><span class="o">(</span>CMAKE_C_FLAGS <span class="s2">"</span><span class="k">${</span><span class="nv">CMAKE_C_FLAGS</span><span class="k">}</span><span class="s2"> -s FORCE_FILESYSTEM=1 -s INITIAL_MEMORY=256MB -s EXIT_RUNTIME=1"</span><span class="o">)</span>
<span class="nb">set</span><span class="o">(</span>CMAKE_CXX_FLAGS <span class="s2">"</span><span class="k">${</span><span class="nv">CMAKE_CXX_FLAGS</span><span class="k">}</span><span class="s2"> -s FORCE_FILESYSTEM=1 -s INITIAL_MEMORY=256MB -s EXIT_RUNTIME=1"</span><span class="o">)</span>
<span class="nb">set</span><span class="o">(</span>CMAKE_EXECUTBLE_LINKER_FLAGS <span class="s2">"</span><span class="k">${</span><span class="nv">CMAKE_EXECUTBLE_LINKER_FLAGS</span><span class="k">}</span><span class="s2"> -s FORCE_FILESYSTEM=1 -s INITIAL_MEMORY=256MB -s EXIT_RUNTIME=1"</span><span class="o">)</span>

<span class="nb">set</span><span class="o">(</span>CMAKE_C_FLAGS <span class="s2">"</span><span class="k">${</span><span class="nv">CMAKE_C_FLAGS</span><span class="k">}</span><span class="s2"> -fopenmp -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=15"</span><span class="o">)</span>
<span class="nb">set</span><span class="o">(</span>CMAKE_CXX_FLAGS <span class="s2">"</span><span class="k">${</span><span class="nv">CMAKE_CXX_FLAGS</span><span class="k">}</span><span class="s2"> -fopenmp -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=15"</span><span class="o">)</span>
<span class="nb">set</span><span class="o">(</span>CMAKE_EXE_LINKER_FLAGS <span class="s2">"</span><span class="k">${</span><span class="nv">CMAKE_EXE_LINKER_FLAGS</span><span class="k">}</span><span class="s2"> -fopenmp -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=15"</span><span class="o">)</span>

<span class="nb">set</span><span class="o">(</span>CMAKE_C_FLAGS <span class="s2">"</span><span class="k">${</span><span class="nv">CMAKE_C_FLAGS</span><span class="k">}</span><span class="s2"> -sEXPORTED_FUNCTIONS=['_yolo_ncnn'] --preload-file </span><span class="k">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="k">}</span><span class="s2">/assets@."</span><span class="o">)</span>
<span class="nb">set</span><span class="o">(</span>CMAKE_CXX_FLAGS <span class="s2">"</span><span class="k">${</span><span class="nv">CMAKE_CXX_FLAGS</span><span class="k">}</span><span class="s2"> -sEXPORTED_FUNCTIONS=['_yolo_ncnn'] --preload-file </span><span class="k">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="k">}</span><span class="s2">/assets@."</span><span class="o">)</span>
<span class="nb">set</span><span class="o">(</span>CMAKE_EXECUTBLE_LINKER_FLAGS <span class="s2">"</span><span class="k">${</span><span class="nv">CMAKE_EXECUTBLE_LINKER_FLAGS</span><span class="k">}</span><span class="s2"> -sEXPORTED_FUNCTIONS=['_yolo_ncnn'] --preload-file </span><span class="k">${</span><span class="nv">CMAKE_CURRENT_SOURCE_DIR</span><span class="k">}</span><span class="s2">/assets@."</span><span class="o">)</span>


add_executable<span class="o">(</span>yolo yolo.cpp<span class="o">)</span>
target_link_libraries<span class="o">(</span>yolo ncnn pthread<span class="o">)</span>
</code></pre></div></div>

<hr />
<p><em>Note: Thanks to NCNN creator nihui for her help in this process.</em></p>
:ET