I"<p>Import the packages first.</p>
<pre><code class="language-{r}">library(magrittr)
library(sn)
</code></pre>

<h1 id="situation-description">Situation Description</h1>

<p>The central limit theorem is an important computational short-cut for generating and making inference from the sampling distribution of the mean. I will recall that the central limit theorem short-cut relies on a
number of conditions, specifically:</p>

<ol>
  <li>Independent observations</li>
  <li>Identically distributed observations</li>
  <li>Mean and variance exist</li>
  <li>Sample size large enough for convergence</li>
</ol>

<p>In this simulation study, I.m going to compare the sampling distribution of the mean generated by simulation to the sampling distribution implied by the central limit theorem. I will compare the distributions graphically in QQ-plots.</p>

<p>This will be a 4 × 4 factorial experiment. The first factor will be the sample size, with N = 5, 10, 20, and 40. The second factor will be the degree of skewness in the underlying distribution. The underlying distribution will be the Skew-Normal distribution. The Skew-Normal distribution has three parameters: location
<script type="math/tex">\xi</script>, scale
<script type="math/tex">\omega</script>, and slant
<script type="math/tex">\alpha</script>. When the slant parameter is 0, the distribution reverts to the normal distribution. As the slant parameter increases, the distribution becomes increasingly skewed. In this simulation, the slant will be set to 0, 2, 10, 100. Set location and scale to 0 and 1, respectively, for all simulation settings.</p>

<h1 id="plot-preparation">Plot preparation</h1>

<p>In the very beginning, we need to set up the parameters that do not change in the following steps. The slant of Skew-Normal distribution will change later, therefore, only the location
<script type="math/tex">\xi</script> and scale
<script type="math/tex">\omega</script> will be set in this part.</p>
<pre><code class="language-{r}">R &lt;- 5000
location &lt;- 0
scale &lt;- 1
</code></pre>

<p>location:
<script type="math/tex">\xi</script>, scale:
<script type="math/tex">\omega</script>, slant:
<script type="math/tex">\alpha</script></p>

<p>Before creating the function, let’s clarify the functions for calculating the delta, mean and standard deviation for the central limit theorem (CLT).</p>

<ol>
  <li>
    <p>Delta:
<script type="math/tex">\delta =\frac{\alpha}{\sqrt{1+\alpha^2}}</script></p>
  </li>
  <li>
    <p>Mean:
<script type="math/tex">\xi+\omega \delta \sqrt{\frac{2}{\pi}}</script></p>
  </li>
  <li>
    <p>Standard deviation:
<script type="math/tex">\sqrt{\omega^2(1-\frac{2\delta^2}{\pi})  }</script></p>
  </li>
</ol>

<p>Then define the function for the CLT process and generating the QQplots by using the functions before.</p>
<pre><code class="language-{r}">qqplot_creator &lt;- function(slant, N) {
  delta &lt;- slant / (sqrt(1 + slant ^ 2))

  # Quantites to calculate/generate
  pop_mean &lt;- location + scale * delta * (sqrt(2 / pi))
  pop_sd &lt;- sqrt(scale ^ 2 * (1 - ((2 * delta ^ 2) / pi)))

  Z &lt;- rnorm(R) # generate the normal distribution as the basement

  #CLT approximation
  sample_dist_clt &lt;- Z * (pop_sd / sqrt(N)) + pop_mean

  #Simulation approximation
  random.skew &lt;- array(rsn(R * N, xi = location, omega = scale, alpha = slant),
                      dim = c(R, N))

  sample_dist_sim &lt;- apply(random.skew, 1, mean)

  qqplot(sample_dist_clt, sample_dist_sim, axes = FALSE, frame.plot=TRUE, ann = FALSE)
  abline(0,1)

  }
</code></pre>

<h1 id="qqplot-generation">QQplot generation</h1>

<p>Now we can set the slants and Ns we want to test in the following steps. As the requirement, the N = 5, 10, 20, and 40 and slant will be set to 0, 2, 10, 100. Then create a sequence to define the points where we want to test.</p>
<pre><code class="language-{r}">slant &lt;- c(0,2,10,100)
N &lt;- c(5,10,20,40)
x &lt;- seq(-2,2,0.01)
</code></pre>

<p>Set a graph for put all of the QQplots together and use the qqplot_creator function to fill the QQplots inside.</p>
<pre><code class="language-{r}">par(mfrow=c(4,5),mai=c(0.1,0.1,0.1,0.1), oma = c(0, 4, 4, 0))

for(i in slant){
  plot(dsn(x,
           xi = location,
           omega = scale,
           alpha = i),
       axes = FALSE,
       frame.plot=TRUE,
       type = "l",
       xlab = NA, ylab = NA)
  for(j in N){
    qqplot_creator(i, j)
  }
}
mtext(text="Distribution              N=5                N=10                   N=20                    N=40",
      side = 3,
      outer = TRUE)
mtext(text="slant = 100   slant = 10       slant = 2      slant = 0",
      side = 2,
      outer = TRUE)
</code></pre>
<p><img src="https://i.postimg.cc/rwCbSBq2/image.png" alt="" /></p>

<h1 id="conclusion">Conclusion</h1>

<p>Definitely, when the N is bigger, the QQplot will fit the y=x line better, which means the CLT works better when it wants to simulate the distribution. And when the slant is bigger, in other words, the Skew-Normal distribution has higher skewness, it will be more difficult to simulate the distribution.</p>
:ET